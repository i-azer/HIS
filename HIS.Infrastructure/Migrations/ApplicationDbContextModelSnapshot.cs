// <auto-generated />
using System;
using HIS.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HIS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HIS.Core.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ModificationDate");

                    b.Property<DateTime>("PatientDateOfBirth")
                        .HasColumnName("PatientDateOfBirth");

                    b.Property<string>("PatientGender")
                        .IsRequired()
                        .HasColumnName("PatientGender");

                    b.Property<string>("PatientInsurance")
                        .IsRequired()
                        .HasColumnName("PatientInsurance");

                    b.Property<string>("PatientMaritalStatus")
                        .IsRequired()
                        .HasColumnName("PatientMaritalStatus");

                    b.Property<string>("PatientNationality")
                        .IsRequired()
                        .HasColumnName("PatientNationality");

                    b.Property<string>("PatientWorkTitle")
                        .HasColumnName("PatientWorkTitle");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("HIS.Core.Entities.Patient", b =>
                {
                    b.OwnsOne("HIS.Core.Entities.ContactInformation", "PatientContactInformation", b1 =>
                        {
                            b1.Property<Guid>("PatientId");

                            b1.Property<string>("MailAddress")
                                .HasColumnName("MailAddress");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.HasOne("HIS.Core.Entities.Patient")
                                .WithOne("PatientContactInformation")
                                .HasForeignKey("HIS.Core.Entities.ContactInformation", "PatientId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("HIS.Core.Entities.Telephone", "Telephone", b2 =>
                                {
                                    b2.Property<Guid>("ContactInformationPatientId");

                                    b2.Property<string>("Home")
                                        .HasColumnName("Home");

                                    b2.Property<string>("Mobile")
                                        .IsRequired()
                                        .HasColumnName("Mobile");

                                    b2.Property<string>("Work")
                                        .HasColumnName("Work");

                                    b2.HasKey("ContactInformationPatientId");

                                    b2.ToTable("Patient");

                                    b2.HasOne("HIS.Core.Entities.ContactInformation")
                                        .WithOne("Telephone")
                                        .HasForeignKey("HIS.Core.Entities.Telephone", "ContactInformationPatientId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("HIS.Core.Entities.Guardian", "PatientGuardian", b1 =>
                        {
                            b1.Property<Guid>("PatientId");

                            b1.Property<string>("GuardianRelation")
                                .IsRequired()
                                .HasColumnName("GuardianRelation");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.HasOne("HIS.Core.Entities.Patient")
                                .WithOne("PatientGuardian")
                                .HasForeignKey("HIS.Core.Entities.Guardian", "PatientId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("HIS.Core.Entities.Address", "GuardianAddress", b2 =>
                                {
                                    b2.Property<Guid>("GuardianPatientId");

                                    b2.Property<string>("AddressLine1")
                                        .HasColumnName("GuardianAddressLine1");

                                    b2.Property<string>("AddressLine2")
                                        .HasColumnName("GuardianAddressLine2");

                                    b2.Property<string>("POBox")
                                        .HasColumnName("GuardianPOBox");

                                    b2.HasKey("GuardianPatientId");

                                    b2.ToTable("Patient");

                                    b2.HasOne("HIS.Core.Entities.Guardian")
                                        .WithOne("GuardianAddress")
                                        .HasForeignKey("HIS.Core.Entities.Address", "GuardianPatientId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("HIS.Core.Entities.Name", "GuardianName", b2 =>
                                {
                                    b2.Property<Guid>("GuardianPatientId");

                                    b2.Property<string>("FirstName")
                                        .HasColumnName("GuardianFirstName");

                                    b2.Property<string>("LastName")
                                        .HasColumnName("GuardianLastName");

                                    b2.Property<string>("MidName")
                                        .HasColumnName("GuardianMidName");

                                    b2.Property<string>("Suffix")
                                        .HasColumnName("GuardianSuffix");

                                    b2.HasKey("GuardianPatientId");

                                    b2.ToTable("Patient");

                                    b2.HasOne("HIS.Core.Entities.Guardian")
                                        .WithOne("GuardianName")
                                        .HasForeignKey("HIS.Core.Entities.Name", "GuardianPatientId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });

                            b1.OwnsOne("HIS.Core.Entities.Telephone", "GuardianTelephone", b2 =>
                                {
                                    b2.Property<Guid>("GuardianPatientId");

                                    b2.Property<string>("Home")
                                        .HasColumnName("GuardianHome");

                                    b2.Property<string>("Mobile")
                                        .HasColumnName("GuardianMobile");

                                    b2.Property<string>("Work")
                                        .HasColumnName("GuardianWork");

                                    b2.HasKey("GuardianPatientId");

                                    b2.ToTable("Patient");

                                    b2.HasOne("HIS.Core.Entities.Guardian")
                                        .WithOne("GuardianTelephone")
                                        .HasForeignKey("HIS.Core.Entities.Telephone", "GuardianPatientId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("HIS.Core.Entities.Identification", "PatientIdentification", b1 =>
                        {
                            b1.Property<Guid>("PatientId");

                            b1.Property<string>("EmirateId")
                                .IsRequired()
                                .HasColumnName("EmirateId");

                            b1.Property<string>("PassportNo")
                                .IsRequired()
                                .HasColumnName("PassportNo");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.HasOne("HIS.Core.Entities.Patient")
                                .WithOne("PatientIdentification")
                                .HasForeignKey("HIS.Core.Entities.Identification", "PatientId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("HIS.Core.Entities.Address", "PatientAddress", b1 =>
                        {
                            b1.Property<Guid>("PatientId");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnName("AddressLine1");

                            b1.Property<string>("AddressLine2")
                                .IsRequired()
                                .HasColumnName("AddressLine2");

                            b1.Property<string>("POBox")
                                .HasColumnName("POBox");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.HasOne("HIS.Core.Entities.Patient")
                                .WithOne("PatientAddress")
                                .HasForeignKey("HIS.Core.Entities.Address", "PatientId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("HIS.Core.Entities.Name", "PatientName", b1 =>
                        {
                            b1.Property<Guid>("PatientId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnName("LastName");

                            b1.Property<string>("MidName")
                                .HasColumnName("MidName");

                            b1.Property<string>("Suffix")
                                .HasColumnName("Suffix");

                            b1.HasKey("PatientId");

                            b1.ToTable("Patient");

                            b1.HasOne("HIS.Core.Entities.Patient")
                                .WithOne("PatientName")
                                .HasForeignKey("HIS.Core.Entities.Name", "PatientId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
